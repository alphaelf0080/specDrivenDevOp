name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Stage 1: Lint & Typecheck
  lint:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run TypeScript check
        run: npx tsc --noEmit

  # Stage 2: Schema Validation
  validate:
    name: Schema Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Validate all spec files
        run: |
          for spec in src/specs/**/*.json; do
            echo "Validating $spec..."
            npm run -s cli -- validate -s "$spec"
          done

  # Stage 3: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm test -- --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Stage 4: Quick Simulation (5k spins for fast feedback)
  simulate:
    name: Quick Simulation
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run simulation on example spec
        run: |
          npm run -s cli -- simulate -s src/specs/examples/basic-slot.json --spins 5000 --seed ci-${{ github.sha }} > simulation-result.txt
          cat simulation-result.txt
      
      - name: Upload simulation results
        uses: actions/upload-artifact@v4
        with:
          name: simulation-results
          path: simulation-result.txt
      
      - name: Comment simulation results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const result = fs.readFileSync('simulation-result.txt', 'utf8');
            const body = `## 🎰 模擬測試結果\n\n\`\`\`\n${result}\n\`\`\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Stage 5: Asset Check (if assets exist)
  asset-check:
    name: Asset Validation
    runs-on: ubuntu-latest
    needs: validate
    if: false  # 預設關閉，待資產目錄建立後啟用
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check assets
        run: |
          node scripts/check-assets.js --spec src/specs/examples/basic-slot.json --assets assets/
      
      - name: Upload asset report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: asset-check-report
          path: reports/asset-check-report.json

  # Stage 6: Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Package dist
        run: tar -czf dist.tar.gz dist/
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist.tar.gz

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, validate, test, simulate, build]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Validate: ${{ needs.validate.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Simulate: ${{ needs.simulate.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.validate.result }}" == "failure" ] || \
             [ "${{ needs.test.result }}" == "failure" ] || \
             [ "${{ needs.simulate.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi
